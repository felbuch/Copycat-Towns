#Note that each line in this dataframe is an account of a given municipality.
##################
#NEXT SCRIPT: 20
##################
####################
#RUN AFTER SCRIPT 10
####################
#Set main working directory
project_folder <- "C:/Users/Felipe/Desktop/Duke MIDS/Modelling and Representation of Data/0 - Final Project/Copycat-Towns/"
setwd(project_folder)
#Load packages
library(magrittr)
library(dplyr)
library(data.table)
library(lubridate)
#Load functions
setwd("./Scripts/1 - Data preparation/Functions/")
source("translate_dataset_column_names.R")
source("digits_of_year.R")
#Starting from the project directory
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data/")
load("Brazil Municipalities with similar accounts to other municipalities in 2018.RData")
#Import data on when each municipality submitted its financial reports
setwd("../1 - Raw data/")
submissions <- read.csv("SICONFI submission dates.csv")
#Translate column names into English
column_names_in_english <- c("municipality_id",
"municipality",
"state",
"institution",
"date","on_time","unknown_coded_as_X30.04.19","late")
submissions %<>%  translate_dataset_column_names(column_names_in_english)
#Get important columns
submissions %<>% as.data.table
submissions %<>% .[,.(municipality_id, municipality,state,date)]
#Convert date to date formar
submissions[, date := dmy(date)]
#Check if only one year
length(submissions$date %>% year %>% unique) == 1
#Define deadline (defined by law LRF)
year <- submissions$date %>% year %>% unique
deadline <- as.Date("2019-04-30", format = "%Y-%m-%d")
rm(year)
#Create an indicator variable for late submission
submissions[, late_submission := 0]
submissions[date > deadline, late_submission := 1]
#Rank from earliest to latest submission
submissions[order(date)]
submissions[, rank := 1:nrow(submissions)]
submissions
copycat <- function(pairs_dt, order_dt = submissions){
pairs_dt <- as.vector(pairs_dt)
city_1_id <- pairs_dt[1] #municipality_id
city_2_id <- pairs_dt[2] #i.municipality_id
#print(city_1_id)
#print(city_2_id)
ranks <- order_dt[(municipality_id == city_1_id) | (municipality_id == city_2_id), .(municipality_id, rank)]
ranks <- unique(ranks)
ranks <- ranks[order(-rank)]
copycat_city = ranks[1,.(municipality_id)] %>% as.numeric
return(copycat_city)
}
#Includes info on which city is the copycat in each pair of accounts.
pairs_of_similar_accounts$copycat_id <- pairs_of_similar_accounts[,.(municipality_id, i.municipality_id)] %>% apply(1, copycat)
########################
## Runs after script 20
########################
# is_unique_key(fin, c("municipality_id","account")) #Checkpoint
#is_unique_key(data_table = pairs_of_similar_accounts, key = c("municipality_id","i.municipality_id","account","amount")) #Checkpoint
similar_accounts <- pairs_of_similar_accounts[,.(municipality_id,
account,
amount,
copycat_id)] %>% unique
is_unique_key(data_table = similar_accounts, key = c("municipality_id","account","amount","copycat_id")) #Checkpoint
#Create identifier. Is this municipality the copycat of this account?
similar_accounts[, is_copycat := ifelse(municipality_id == copycat_id, 1, 0)]
#Filters only copied accounts
copied_accounts <- similar_accounts[is_copycat == 1]
copied_accounts[,copycat_id := NULL]
copied_accounts
left_join(fin, copied_accounts) %>% as.data.table
fin <- left_join(fin, copied_accounts) %>% as.data.table
rm(list = ls());gc()
#Set main working directory
project_folder <- "C:/Users/Felipe/Desktop/Duke MIDS/Modelling and Representation of Data/0 - Final Project/Copycat-Towns/"
setwd(project_folder)
#Load packages
library(magrittr)
library(dplyr)
library(data.table)
library(ggplot2)
#Load functions
setwd("./Scripts/1 - Data preparation/Functions/")
source("translate_dataset_column_names.R")
source("create_account_id.R")
source("remove_repeating_zeros_between_dots.R")
source("as_percentage.R")
source("is_unique_key.R")
source("change_decimal_separator.R")
#Import financial accounts datasets
setwd(project_folder)
setwd("./Datasets/1 - Raw data/")
fin = fread("Brazil Municipalities Balance Sheets 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin %<>%  translate_dataset_column_names(names_fin_datasets)
#Does each account appear only once per municipality?
is_unique_key(data_table = fin, key = c("account","municipality_id"))
#Set key
setkey(fin, account, municipality_id)
# Transforms the amount in accounts from brazilian notation (i.e. comma instead of point for decimals) and
# as a character) into a numeric value
fin[ , amount := change_decimal_separator(amount)]
fin$amount %<>% as.numeric
is.numeric(fin$amount) #Checkpoint
#Identify different municipalities with the same amount in the same account
#Accounts with zero value do not count for as similar accounts
is_unique_key(data_table = fin, key = c("account","municipality_id")) #Checkpoint
pairs_of_similar_accounts <- fin[fin, on = .(account,amount), nomatch = 0]
pairs_of_similar_accounts %<>% .[amount != 0]
pairs_of_similar_accounts %<>% .[municipality_id != i.municipality_id]
#Our key here is a pair of municipalities which share an account with similar value
is_unique_key(data_table = pairs_of_similar_accounts, key = c("municipality_id","i.municipality_id","account","amount"))
#Save similar accounts
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data/")
write.csv2(pairs_of_similar_accounts, file = "Pairs of similar accounts.csv", fileEncoding = "utf-8")
#A few remarks:
# 1 - Each pair of municipalities appear twice in the database, in reverse order.
# Thus, one has A-B in one line and B-A in another line, representing a single fact: that A and B share a similar account.
# 2 - It follows that the number of similarities is actually half the number of rows in the similar accounts.
# 3 - It also follows that nrow(similar_accounts) should be an even number, so we check that:
if(!(nrow(pairs_of_similar_accounts) %% 2 == 0))
{
print("Something went wrong. The similar_accounts dataframe should have had an even number of rows")
}
#4 - The unit of analysis here is a pair. However, we only have nrows(similar_accounts / 2) pairs with similar
# out of a total of (Choose(nrow(fin18),2)) possibilities. This is really small. In fact, that is
(nrow(pairs_of_similar_accounts)/2) / choose(nrow(fin),2)
#Identify in the fin dataset which account either is a copy or was coppied.
#Note that each line in this dataframe is an account of a given municipality.
##################
#NEXT SCRIPT: 20
##################
####################
#RUN AFTER SCRIPT 10
####################
#Set main working directory
project_folder <- "C:/Users/Felipe/Desktop/Duke MIDS/Modelling and Representation of Data/0 - Final Project/Copycat-Towns/"
setwd(project_folder)
#Load packages
library(magrittr)
library(dplyr)
library(data.table)
library(lubridate)
#Load functions
setwd("./Scripts/1 - Data preparation/Functions/")
source("translate_dataset_column_names.R")
source("digits_of_year.R")
#Starting from the project directory
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data/")
load("Brazil Municipalities with similar accounts to other municipalities in 2018.RData")
#Import data on when each municipality submitted its financial reports
setwd("../1 - Raw data/")
submissions <- read.csv("SICONFI submission dates.csv")
#Translate column names into English
column_names_in_english <- c("municipality_id",
"municipality",
"state",
"institution",
"date","on_time","unknown_coded_as_X30.04.19","late")
submissions %<>%  translate_dataset_column_names(column_names_in_english)
#Get important columns
submissions %<>% as.data.table
submissions %<>% .[,.(municipality_id, municipality,state,date)]
#Convert date to date formar
submissions[, date := dmy(date)]
#Check if only one year
length(submissions$date %>% year %>% unique) == 1
#Define deadline (defined by law LRF)
year <- submissions$date %>% year %>% unique
deadline <- as.Date("2019-04-30", format = "%Y-%m-%d")
rm(year)
#Create an indicator variable for late submission
submissions[, late_submission := 0]
submissions[date > deadline, late_submission := 1]
#Rank from earliest to latest submission
submissions[order(date)]
submissions[, rank := 1:nrow(submissions)]
submissions
copycat <- function(pairs_dt, order_dt = submissions){
pairs_dt <- as.vector(pairs_dt)
city_1_id <- pairs_dt[1] #municipality_id
city_2_id <- pairs_dt[2] #i.municipality_id
#print(city_1_id)
#print(city_2_id)
ranks <- order_dt[(municipality_id == city_1_id) | (municipality_id == city_2_id), .(municipality_id, rank)]
ranks <- unique(ranks)
ranks <- ranks[order(-rank)]
copycat_city = ranks[1,.(municipality_id)] %>% as.numeric
return(copycat_city)
}
#Includes info on which city is the copycat in each pair of accounts.
pairs_of_similar_accounts$copycat_id <- pairs_of_similar_accounts[,.(municipality_id, i.municipality_id)] %>% apply(1, copycat)
rm(list = ls());gc()
#Set main working directory
project_folder <- "C:/Users/Felipe/Desktop/Duke MIDS/Modelling and Representation of Data/0 - Final Project/Copycat-Towns/"
setwd(project_folder)
#Load packages
library(magrittr)
library(dplyr)
library(data.table)
library(ggplot2)
#Load functions
setwd("./Scripts/1 - Data preparation/Functions/")
source("translate_dataset_column_names.R")
source("create_account_id.R")
source("remove_repeating_zeros_between_dots.R")
source("as_percentage.R")
source("is_unique_key.R")
source("change_decimal_separator.R")
#Import financial accounts datasets
setwd(project_folder)
setwd("./Datasets/1 - Raw data/")
fin = fread("Brazil Municipalities Balance Sheets 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin %<>%  translate_dataset_column_names(names_fin_datasets)
#Does each account appear only once per municipality?
is_unique_key(data_table = fin, key = c("account","municipality_id"))
#Set key
setkey(fin, account, municipality_id)
# Transforms the amount in accounts from brazilian notation (i.e. comma instead of point for decimals) and
# as a character) into a numeric value
fin[ , amount := change_decimal_separator(amount)]
fin$amount %<>% as.numeric
is.numeric(fin$amount) #Checkpoint
#Identify different municipalities with the same amount in the same account
#Accounts with zero value do not count for as similar accounts
is_unique_key(data_table = fin, key = c("account","municipality_id")) #Checkpoint
pairs_of_similar_accounts <- fin[fin, on = .(account,amount), nomatch = 0]
pairs_of_similar_accounts %<>% .[amount != 0]
pairs_of_similar_accounts %<>% .[municipality_id != i.municipality_id]
#Our key here is a pair of municipalities which share an account with similar value
is_unique_key(data_table = pairs_of_similar_accounts, key = c("municipality_id","i.municipality_id","account","amount"))
#Save similar accounts
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data/")
write.csv2(pairs_of_similar_accounts, file = "Pairs of similar accounts.csv", fileEncoding = "utf-8")
#A few remarks:
# 1 - Each pair of municipalities appear twice in the database, in reverse order.
# Thus, one has A-B in one line and B-A in another line, representing a single fact: that A and B share a similar account.
# 2 - It follows that the number of similarities is actually half the number of rows in the similar accounts.
# 3 - It also follows that nrow(similar_accounts) should be an even number, so we check that:
if(!(nrow(pairs_of_similar_accounts) %% 2 == 0))
{
print("Something went wrong. The similar_accounts dataframe should have had an even number of rows")
}
#4 - The unit of analysis here is a pair. However, we only have nrows(similar_accounts / 2) pairs with similar
# out of a total of (Choose(nrow(fin18),2)) possibilities. This is really small. In fact, that is
(nrow(pairs_of_similar_accounts)/2) / choose(nrow(fin),2)
#Identify in the fin dataset which account either is a copy or was coppied.
#Note that each line in this dataframe is an account of a given municipality.
##################
#NEXT SCRIPT: 20
##################
####################
#RUN AFTER SCRIPT 10
####################
#Set main working directory
project_folder <- "C:/Users/Felipe/Desktop/Duke MIDS/Modelling and Representation of Data/0 - Final Project/Copycat-Towns/"
setwd(project_folder)
#Load packages
library(magrittr)
library(dplyr)
library(data.table)
library(lubridate)
#Load functions
setwd("./Scripts/1 - Data preparation/Functions/")
source("translate_dataset_column_names.R")
source("digits_of_year.R")
#Starting from the project directory
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data/")
load("Brazil Municipalities with similar accounts to other municipalities in 2018.RData")
#Import data on when each municipality submitted its financial reports
setwd("../1 - Raw data/")
submissions <- read.csv("SICONFI submission dates.csv")
#Translate column names into English
column_names_in_english <- c("municipality_id",
"municipality",
"state",
"institution",
"date","on_time","unknown_coded_as_X30.04.19","late")
submissions %<>%  translate_dataset_column_names(column_names_in_english)
#Get important columns
submissions %<>% as.data.table
submissions %<>% .[,.(municipality_id, municipality,state,date)]
#Convert date to date formar
submissions[, date := dmy(date)]
#Check if only one year
length(submissions$date %>% year %>% unique) == 1
#Define deadline (defined by law LRF)
year <- submissions$date %>% year %>% unique
deadline <- as.Date("2019-04-30", format = "%Y-%m-%d")
rm(year)
#Create an indicator variable for late submission
submissions[, late_submission := 0]
submissions[date > deadline, late_submission := 1]
#Rank from earliest to latest submission
submissions[order(date)]
submissions[, rank := 1:nrow(submissions)]
submissions
copycat <- function(pairs_dt, order_dt = submissions){
pairs_dt <- as.vector(pairs_dt)
city_1_id <- pairs_dt[1] #municipality_id
city_2_id <- pairs_dt[2] #i.municipality_id
#print(city_1_id)
#print(city_2_id)
ranks <- order_dt[(municipality_id == city_1_id) | (municipality_id == city_2_id), .(municipality_id, rank)]
ranks <- unique(ranks)
ranks <- ranks[order(-rank)]
copycat_city = ranks[1,.(municipality_id)] %>% as.numeric
return(copycat_city)
}
#Includes info on which city is the copycat in each pair of accounts.
pairs_of_similar_accounts$copycat_id <- pairs_of_similar_accounts[,.(municipality_id, i.municipality_id)] %>% apply(1, copycat)
rm(list = ls());gc()
#Set main working directory
project_folder <- "C:/Users/Felipe/Desktop/Duke MIDS/Modelling and Representation of Data/0 - Final Project/Copycat-Towns/"
setwd(project_folder)
#Load packages
library(magrittr)
library(dplyr)
library(data.table)
library(ggplot2)
#Load functions
setwd("./Scripts/1 - Data preparation/Functions/")
source("translate_dataset_column_names.R")
source("create_account_id.R")
source("remove_repeating_zeros_between_dots.R")
source("as_percentage.R")
source("is_unique_key.R")
source("change_decimal_separator.R")
#Import financial accounts datasets
setwd(project_folder)
setwd("./Datasets/1 - Raw data/")
fin = fread("Brazil Municipalities Balance Sheets 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin %<>%  translate_dataset_column_names(names_fin_datasets)
#Does each account appear only once per municipality?
is_unique_key(data_table = fin, key = c("account","municipality_id"))
#Set key
setkey(fin, account, municipality_id)
# Transforms the amount in accounts from brazilian notation (i.e. comma instead of point for decimals) and
# as a character) into a numeric value
fin[ , amount := change_decimal_separator(amount)]
fin$amount %<>% as.numeric
is.numeric(fin$amount) #Checkpoint
#Identify different municipalities with the same amount in the same account
#Accounts with zero value do not count for as similar accounts
is_unique_key(data_table = fin, key = c("account","municipality_id")) #Checkpoint
pairs_of_similar_accounts <- fin[fin, on = .(account,amount), nomatch = 0]
pairs_of_similar_accounts %<>% .[amount != 0]
pairs_of_similar_accounts %<>% .[municipality_id != i.municipality_id]
#Our key here is a pair of municipalities which share an account with similar value
is_unique_key(data_table = pairs_of_similar_accounts, key = c("municipality_id","i.municipality_id","account","amount"))
#Save similar accounts
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data/")
write.csv2(pairs_of_similar_accounts, file = "Pairs of similar accounts.csv", fileEncoding = "utf-8")
#A few remarks:
# 1 - Each pair of municipalities appear twice in the database, in reverse order.
# Thus, one has A-B in one line and B-A in another line, representing a single fact: that A and B share a similar account.
# 2 - It follows that the number of similarities is actually half the number of rows in the similar accounts.
# 3 - It also follows that nrow(similar_accounts) should be an even number, so we check that:
if(!(nrow(pairs_of_similar_accounts) %% 2 == 0))
{
print("Something went wrong. The similar_accounts dataframe should have had an even number of rows")
}
#4 - The unit of analysis here is a pair. However, we only have nrows(similar_accounts / 2) pairs with similar
# out of a total of (Choose(nrow(fin18),2)) possibilities. This is really small. In fact, that is
(nrow(pairs_of_similar_accounts)/2) / choose(nrow(fin),2)
#Identify in the fin dataset which account either is a copy or was coppied.
#Note that each line in this dataframe is an account of a given municipality.
##################
#NEXT SCRIPT: 20
##################
#Set main working directory
project_folder <- "C:/Users/Felipe/Desktop/Duke MIDS/Modelling and Representation of Data/0 - Final Project/Copycat-Towns/"
setwd(project_folder)
#Load packages
library(magrittr)
library(dplyr)
library(data.table)
library(lubridate)
#Load functions
setwd("./Scripts/1 - Data preparation/Functions/")
source("translate_dataset_column_names.R")
source("digits_of_year.R")
#Starting from the project directory
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data/")
load("Brazil Municipalities with similar accounts to other municipalities in 2018.RData")
#Import data on when each municipality submitted its financial reports
setwd("../1 - Raw data/")
submissions <- read.csv("SICONFI submission dates.csv")
#Translate column names into English
column_names_in_english <- c("municipality_id",
"municipality",
"state",
"institution",
"date","on_time","unknown_coded_as_X30.04.19","late")
submissions %<>%  translate_dataset_column_names(column_names_in_english)
#Get important columns
submissions %<>% as.data.table
submissions %<>% .[,.(municipality_id, municipality,state,date)]
#Convert date to date formar
submissions[, date := dmy(date)]
#Check if only one year
length(submissions$date %>% year %>% unique) == 1
#Define deadline (defined by law LRF)
year <- submissions$date %>% year %>% unique
deadline <- as.Date("2019-04-30", format = "%Y-%m-%d")
rm(year)
#Create an indicator variable for late submission
submissions[, late_submission := 0]
submissions[date > deadline, late_submission := 1]
#Rank from earliest to latest submission
submissions[order(date)]
submissions
#Rank from earliest to latest submission
submissions <- submissions[order(date)]
submissions
submissions[, rank := 1:nrow(submissions)]
submissions
copycat <- function(pairs_dt, order_dt = submissions){
pairs_dt <- as.vector(pairs_dt)
city_1_id <- pairs_dt[1] #municipality_id
city_2_id <- pairs_dt[2] #i.municipality_id
#print(city_1_id)
#print(city_2_id)
ranks <- order_dt[(municipality_id == city_1_id) | (municipality_id == city_2_id), .(municipality_id, rank)]
ranks <- unique(ranks)
ranks <- ranks[order(-rank)]
copycat_city = ranks[1,.(municipality_id)] %>% as.numeric
return(copycat_city)
}
pairs_of_similar_accounts$copycat_id <- pairs_of_similar_accounts[,.(municipality_id, i.municipality_id)] %>% apply(1, copycat)
similar_accounts <- pairs_of_similar_accounts[,.(municipality_id,
account,
amount,
copycat_id)] %>% unique
is_unique_key(data_table = similar_accounts, key = c("municipality_id","account","amount","copycat_id")) #Checkpoint
#Create identifier. Is this municipality the copycat of this account?
similar_accounts[, is_copycat := ifelse(municipality_id == copycat_id, 1, 0)]
#Filters only copied accounts
copied_accounts <- similar_accounts[is_copycat == 1]
copied_accounts[,copycat_id := NULL]
fin <- left_join(fin, copied_accounts) %>% as.data.table
fin[is.na(is_copycat), is_copycat := 0]
fin
is_unique_key(fin, c("municipality_id","account", "copycat_id"))
names(fin)
cities <- fin[, .(municipality = unique(municipality),
state = unique(state),
population = unique(population),
n_copied_accounts = sum(is_copycat),
is_copycat = max(is_copycat)), by = municipality_id]
cities
cities[,.N, municipality_id]
cities[,.N, municipality_id]$N
cities[,.N, municipality_id]$N == 1
prod(cities[,.N, municipality_id]$N == 1)
all(cities[,.N, municipality_id]$N == 1)
is_unique_key(cities, municipality_id)
is_unique_key(cities, "municipality_id")
#Save
setwd(project_folder)
setwd("./Datasets/2 - Intermediary data")
head(fin)
save(cities, file = "Municipality_copycat_info.RData")
fin$municipality_id %>% unique %>% length
length(unique(fin$municipality_id))
length(unique(fin$municipality_id)) == nrow(cities)
head(cities)
sum(cities$n_copied_accounts)
sum(cities$n_copied_accounts) == nrow(copied_accounts) #Checkpoint

xtable::xtable(confmat$table, type = "text")
acc <- confmat$overall['Accuracy']
?xtable
confmat <- caret::confusionMatrix(data = as.factor(ifelse(predict(m4, test,"response") > 0.5, 1,0)), test$premature)
xtable::xtable(confmat$table)
acc <- confmat$overall['Accuracy']
confmat$table
xtable::xtable(confmat$table)
xtable::xtable(confmat$table,type = "pdf")
xtable::xtable(confmat$table,type = "pdf")
anova(m1,m2,test = "Chisq")
anova(m1,m3,test = "Chisq")
anova(m4,m3,test = "Chisq")
anova(m1,m2,test = "Chisq")
anova(m4,m3,test = "Chisq")
confmat <- caret::confusionMatrix(data = as.factor(ifelse(predict(m4, test,"response") > 0.5, 1,0)), test$premature)
confmat$table
acc <- confmat$overall['Accuracy'] * 100 %>% round(1)
confmat <- caret::confusionMatrix(data = as.factor(ifelse(predict(m4, test,"response") > 0.5, 1,0)), test$premature)
confmat$table
acc <- confmat$overall['Accuracy'] * 100 %>% round(1)
sens <- confmat$overall['Sensitivity'] * 100 %>% round(1)
spec <- confmat$overall['Specificity'] * 100 %>% round(1)
acc
confmat <- caret::confusionMatrix(data = as.factor(ifelse(predict(m4, test,"response") > 0.5, 1,0)), test$premature)
confmat$table
acc <- confmat$overall['Accuracy'] * 100 %>% round(1)
sens <- confmat$overall['Sensitivity'] * 100 %>% round(1)
spec <- confmat$overall['Specificity'] * 100 %>% round(1)
acc
sens
confmat$overall['Sensitivity'] * 100 %>% round(1)
confmat$overall['sensitivity'] * 100 %>% round(1)
confmat$byClass['Sensitivity'] * 100 %>% round(1)
round(confmat$byClass['Sensitivity'] * 100,1)
round(confmat$byClass['Specificity'] * 100,1)
confmat
confmat <- caret::confusionMatrix(data = as.factor(ifelse(predict(m2, test,"response") > 0.5, 1,0)), test$premature)
confmat$table
acc <- round(confmat$overall['Accuracy'] * 100,1)
sens <- round(confmat$byClass['Sensitivity'] * 100,1)
spec <- round(confmat$byClass['Specificity'] * 100,1)
acc
sens
spec
confmat <- caret::confusionMatrix(data = as.factor(ifelse(predict(m1, test,"response") > 0.5, 1,0)), test$premature)
confmat$table
acc <- round(confmat$overall['Accuracy'] * 100,1)
sens <- round(confmat$byClass['Sensitivity'] * 100,1)
spec <- round(confmat$byClass['Specificity'] * 100,1)
acc
sens
spec
confmat <- caret::confusionMatrix(data = as.factor(ifelse(predict(m4, test,"response") > 0.5, 1,0)), test$premature)
confmat$table
acc <- round(confmat$overall['Accuracy'] * 100,1)
sens <- round(confmat$byClass['Sensitivity'] * 100,1)
spec <- round(confmat$byClass['Specificity'] * 100,1)
acc
sens
spec
?step
rf <- randrandomForest::randomForest(premature ~ ., data = train)
install.packages("randomForest")
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
m_aux <- glm(premature ~ ., family = binomial(link = "logit"), data = reg_data)
logodds <- predict(m_aux)
par(mfrow = c(2,3))
plot(jitter(train$parity), logodds, col = train$inc, pch = 16)
m_aux <- glm(premature ~ ., family = binomial(link = "logit"), data = reg_data)
logodds <- predict(m_aux)
par(mfrow = c(2,3))
plot(jitter(reg_data$parity), logodds, col = reg_data$inc, pch = 16)
plot(jitter(reg_data$mage), logodds, col = reg_data$inc, pch = 16)
plot(jitter(reg_data$mht), logodds, col = reg_data$inc, pch = 16)
plot(jitter(reg_data$mpregwt), logodds, col = reg_data$inc, pch = 16)
plot(reg_data$white, logodds, col = reg_data$inc, pch = 16, ylab = "logodds",xlab = "white")
par(mfrow = c(1,1))
m_aux <- glm(premature ~ ., family = binomial(link = "logit"), data = reg_data)
logodds <- predict(m_aux)
par(mfrow = c(2,3))
plot(jitter(reg_data$parity), logodds, col = reg_data$inc, pch = 16, xlab = "parity (jittered)")
plot(jitter(reg_data$mage), logodds, col = reg_data$inc, pch = 16, xlab = "age (jittered)")
plot(jitter(reg_data$mht), logodds, col = reg_data$inc, pch = 16, xlab = "height (jittered)")
plot(jitter(reg_data$mpregwt), logodds, col = reg_data$inc, pch = 16, xlab = "preg wt (jittered)")
plot(reg_data$white, logodds, col = reg_data$inc, pch = 16, ylab = "logodds",xlab = "white")
par(mfrow = c(1,1))
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
rf <- randomForest::randomForest(premature ~ .,data = train)
rf
caret::confusionMatrix(predict(rf, test),test$premature)
caret::confusionMatrix(predict(rf, test),test$premature)
predict(rf, test)
caret::confusionMatrix(predict(rf, test),test$premature)
rf
rf <- randomForest::randomForest(premature ~ .,weights = c(20,80),data = train)
rf
rf <- randomForest::randomForest(premature ~ .,weights = c(80,20),data = train)
rf
rf <- randomForest::randomForest(premature ~ .,weights = c(20,80),data = train)
caret::confusionMatrix(predict(rf, test),test$premature)
rf <- randomForest::randomForest(premature ~ .,weights = c(1/80,1/20),data = train)
caret::confusionMatrix(predict(rf, test),test$premature)
rf <- randomForest::randomForest(premature ~ .,weights = c(1/20,1/80),data = train)
rf
table(train$premature)
table(train$premature)/length(train$premature)
rf <- randomForest::randomForest(premature ~ .,weights = c(1/18,1/81),data = train)
rf
rf <- randomForest::randomForest(premature ~ .,weights = c(1/81,1/18),data = train)
rf
caret::confusionMatrix(predict(rf, test),test$premature)
?nnet
nnet(premature ~ .)
nnet::nnet(premature ~ .)
nnet::nnet(premature ~ ., data = train)
nnet::nnet(premature ~ ., size = 5, data = train)
nn1 <- nnet::nnet(premature ~ ., size = 5, data = train)
nn1
predict(nn1, test)
caret::confusionMatrix(nn1, test$premature)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test)>.5,1,0)), test$premature)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
nn1 <- nnet::nnet(premature ~ ., size = 10, data = train)
nn1 <- nnet::nnet(premature ~ ., size = 10, data = train)
nn1 <- nnet::nnet(premature ~ ., size = 5, data = train)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
caret::confusionMatrix(as.factor(ifelse(predict(rf,test) > 0.5,1,0)), test$premature)
caret::confusionMatrix(as.factor(ifelse(predict(rf,test) > 0.5,1,0)), test$premature)
predict(rf,test)
caret::confusionMatrix(as.factor(ifelse(predict(rf,test) > 0.5,1,0)), test$premature)
caret::confusionMatrix(as.factor(ifelse(as.numeric(predict(rf,test)) > 0.5,1,0)), test$premature)
rf
summary(rf)
caret::confusionMatrix(rf, test$premature)
caret::confusionMatrix(as.factor(ifelse(predict(rf,test) > .5,1,0), test$premature)
)
caret::confusionMatrix(as.factor(ifelse(predict(rf,test) > .5,1,0)), test$premature)
caret::confusionMatrix(as.factor(ifelse(predict(rf,test) > 0.5,1,0)), test$premature)
caret::confusionMatrix(as.factor(ifelse(as.numeric(predict(rf,test)) > 0.5,1,0)), test$premature)
caret::confusionMatrix(ifelse(as.numeric(predict(rf,test)) > 0.5,1,0)), test$premature)
nn1 <- nnet::nnet(premature ~ ., size = c(5,5), data = train, maxit = 1000)
nn1 <- nnet::nnet(premature ~ ., size = 10, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
nn1 <- nnet::nnet(premature ~ ., size = 20, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
nn1 <- nnet::nnet(premature ~ ., size = 25, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
nn1 <- nnet::nnet(premature ~ ., size = 10, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
plot(nnet::nnet(premature ~ ., size = 10, data = train, maxit = 1000))
nn1$residuals
nn1$residuals %>% hist
nn1$decay
nn1$value
nn1$softmax
nn1$nunits
nn1 <- nnet::nnet(premature ~ ., size = 5, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
randomForest::varImpPlot(rf)
knitr::opts_chunk$set(echo = FALSE,
include = FALSE)
library(magrittr)
nn <- nnet::nnet(premature ~ ., size = 5, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
nn <- nnet::nnet(premature ~ ., size = 10, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
nn <- nnet::nnet(premature ~ ., size = 20, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn1,test) > 0.5,1,0)), test$premature)
nn <- nnet::nnet(premature ~ ., size = 5, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn,test) > 0.5,1,0)), test$premature)
nn <- nnet::nnet(premature ~ ., size = 10, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn,test) > 0.5,1,0)), test$premature)
pi_hat <- predict.glm(nn, test, type = "response")
pi_hat <- predict(nn, test, type = "response")
pi_hat <- predict(nn, test)
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
nn <- nnet::nnet(premature ~ ., size = 5, data = train, maxit = 1000)
caret::confusionMatrix(as.factor(ifelse(predict(nn,test) > 0.5,1,0)), test$premature)
pi_hat <- predict(nn, test)
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(c(.4,.4))
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(c(.04,.04))
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(c(1,.04))
?points
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .4, y = .6)
points(x = .4, y = .4)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .4, y = .4)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .3, y = .4)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .3, y = .4, type = 1)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .3, y = .4, pch = 1)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .3, y = .4, pch = 2)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .3, y = .4, pch = 3)
library(ROCR)
pi_hat <- predict.glm(m4, test, type = "response")
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
points(x = .5, y = .5, pch = 1)
points(x = .3, y = .4, pch = 3)
pi_hat <- predict(nn, test)
aux <- prediction(predictions = pi_hat, labels = test$premature)
perf <- performance(aux, 'tpr','fpr')
plot(perf, colorize = TRUE, main = "ROC Curve")
abline(a = 0, b = 1)
text(x = .7,y = .33,labels = paste0("AUC = ",round(performance(aux, "auc")@y.values[[1]],2)))
rm(list = ls())
setwd("C:\\Users\\Felipe\\Desktop\\Duke MIDS\\Modelling and Representation of Data\\project")
library(magrittr)
library(dplyr)
library(data.table)
source("translate_dataset_column_names.R")
source("split_account_number.R")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
fin18 = fread("Brasil Municipalities Financial Accounts 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin17 %<>%  translate_dataset_column_names(names_fin_datasets)
fin18 %<>%  translate_dataset_column_names(names_fin_datasets)
#Split account into separate columns containing account number and name
fin17[,account_number := split_account_number(account)$number]
fin17[,account := split_account_number(account)$name]
fin18[,account_number := split_account_number(account)$number]
fin18[,account := split_account_number(account)$name]
#We create a unique id for each account
fin17$account_type %>% unique
rm(list = ls())
setwd("C:\\Users\\Felipe\\Desktop\\Duke MIDS\\Modelling and Representation of Data\\project")
library(magrittr)
library(dplyr)
library(data.table)
source("translate_dataset_column_names.R")
source("split_account_number.R")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
fin18 = fread("Brasil Municipalities Financial Accounts 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin17 %<>%  translate_dataset_column_names(names_fin_datasets)
fin18 %<>%  translate_dataset_column_names(names_fin_datasets)
#Split account into separate columns containing account number and name
fin17[,account_number := split_account_number(account)$number]
fin17[,account_name := split_account_number(account)$name]
fin18[,account_number := split_account_number(account)$number]
fin18[,account := split_account_number(account)$name]
#Join
fin = inner_join(fin17, fin18, by = c("municipality_id","account_type","account_name"), suffix = c("17","18")) %>% as.data.table
rm(list = ls())
setwd("C:\\Users\\Felipe\\Desktop\\Duke MIDS\\Modelling and Representation of Data\\project")
library(magrittr)
library(dplyr)
library(data.table)
source("translate_dataset_column_names.R")
source("split_account_number.R")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
fin18 = fread("Brasil Municipalities Financial Accounts 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin17 %<>%  translate_dataset_column_names(names_fin_datasets)
fin18 %<>%  translate_dataset_column_names(names_fin_datasets)
#Split account into separate columns containing account number and name
fin17[,account_number := split_account_number(account)$number]
fin17[,account_name := split_account_number(account)$name]
fin18[,account_number := split_account_number(account)$number]
fin18[,account_name := split_account_number(account)$name]
#Join
fin = inner_join(fin17, fin18, by = c("municipality_id","account_type","account_name"), suffix = c("17","18")) %>% as.data.table
#Join
fin = inner_join(fin17, fin18, by = c("municipality_id","account_name"), suffix = c("17","18")) %>% as.data.table
#Join
fin = inner_join(fin17, fin18, by = c("municipality_id","account_name"), suffix = c("17","18")) %>% as.data.table
account_number <- 1.0.0.00.0.00.0
account_number <- "1.0.0.00.0.00.0"
split(account_number, ".")
split(account_number, ".")[1]
strsplit(account_number, ".")[1]
strsplit(account_number, ".")[[1]]
strsplit(account_number, ".")
strsplit(account_number)
account_number <- "1.0.0.00.0.00.0"
strsplit(account_number,".")
?strsplit
strsplit(account_number,"\.")
account_number <- "1.0.0.00.0.00.0"
strsplit(account_number,"\.")
account_number <- "1.0.0.00.0.00.0"
strsplit(account_number,".")
account_number
grep(".\..,account_number")
grep("*.*",account_number")
grep("*.*", account_number)
gsub(".00.",".0.",account_number)
gsub(".00",".0",account_number)
source("remove_repeating_zeros_between_dots.R")
fina17[,account_number := remove_repeating_zeros_between_dots(account_number)]
fin17[,account_number := remove_repeating_zeros_between_dots(account_number)]
fin18[,account_number := remove_repeating_zeros_between_dots(account_number)]
rm(list = ls())
setwd("C:\\Users\\Felipe\\Desktop\\Duke MIDS\\Modelling and Representation of Data\\project")
library(magrittr)
library(dplyr)
library(data.table)
source("translate_dataset_column_names.R")
source("split_account_number.R")
source("remove_repeating_zeros_between_dots.R")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
fin18 = fread("Brasil Municipalities Financial Accounts 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin17 %<>%  translate_dataset_column_names(names_fin_datasets)
fin18 %<>%  translate_dataset_column_names(names_fin_datasets)
#Split account into separate columns containing account number and name
fin17[,account_number := split_account_number(account)$number]
fin17[,account_name := split_account_number(account)$name]
fin18[,account_number := split_account_number(account)$number]
fin18[,account_name := split_account_number(account)$name]
#Sometimes, the number of the same account has a slightly different
#representation in different years. For example, the same account may appear
#as 1.0.0.0 in one year and 1.00.00.00 in another year. We correct this
#by removing subsequent zeros between two dots.
fin17[,account_number := remove_repeating_zeros_between_dots(account_number)]
fin18[,account_number := remove_repeating_zeros_between_dots(account_number)]
rm(list = ls())
setwd("C:\\Users\\Felipe\\Desktop\\Duke MIDS\\Modelling and Representation of Data\\project")
library(magrittr)
library(dplyr)
library(data.table)
source("translate_dataset_column_names.R")
source("split_account_number.R")
source("remove_repeating_zeros_between_dots.R")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
fin18 = fread("Brasil Municipalities Financial Accounts 2018.csv")
#Define english translation of column names
names_fin_datasets <- c("municipality",
"municipality_id",
"state",
"population",
"account_type",
"account",
"amount")
#Translate column names to english
fin17 %<>%  translate_dataset_column_names(names_fin_datasets)
fin18 %<>%  translate_dataset_column_names(names_fin_datasets)
#Split account into separate columns containing account number and name
fin17[,account_number := split_account_number(account)$number]
fin17[,account_name := split_account_number(account)$name]
fin18[,account_number := split_account_number(account)$number]
fin18[,account_name := split_account_number(account)$name]
#Sometimes, the number of the same account has a slightly different
#representation in different years. For example, the same account may appear
#as 1.0.0.0 in one year and 1.00.00.00 in another year. We correct this
#by removing subsequent zeros between two dots.
fin17[,account_number := remove_repeating_zeros_between_dots(account_number)]
fin18[,account_number := remove_repeating_zeros_between_dots(account_number)]
rm(list = ls());gc()
rm(list = ls());gc()
setwd("C:\\Users\\Felipe\\Desktop\\Duke MIDS\\Modelling and Representation of Data\\project")
library(magrittr)
library(dplyr)
library(data.table)
source("translate_dataset_column_names.R")
source("split_account_number.R")
source("remove_repeating_zeros_between_dots.R")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
fin18 = fread("Brasil Municipalities Financial Accounts 2018.csv")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
rm(list = ls());gc()
setwd("C:\\Users\\Felipe\\Desktop\\Duke MIDS\\Modelling and Representation of Data\\project")
library(magrittr)
library(dplyr)
library(data.table)
source("translate_dataset_column_names.R")
source("split_account_number.R")
source("remove_repeating_zeros_between_dots.R")
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
library(data.table)
#Import financial accounts datasets
fin17 = fread("Brasil Municipalities Financial Accounts 2017.csv")
fin18 = fread("Brasil Municipalities Financial Accounts 2018.csv")
